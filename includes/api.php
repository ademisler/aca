<?php
/**
 * ACA - AI Content Agent
 *
 * Central API Communication
 *
 * @package ACA
 * @version 1.0
 * @since   1.0
 */

if ( ! defined( 'ABSPATH' ) ) {
        exit; // Exit if accessed directly.
}

/**
 * Encrypt a string using the AUTH_KEY as a secret.
 *
 * @param string $data Plain text to encrypt.
 * @return string Encrypted and base64-encoded string.
 */
function aca_encrypt( $data ) {
    if ( empty( $data ) ) {
        return '';
    }
    $key    = defined( 'AUTH_KEY' ) ? AUTH_KEY : 'aca_default_key';
    $method = 'AES-256-CBC';
    $iv_len = openssl_cipher_iv_length( $method );
    $iv     = openssl_random_pseudo_bytes( $iv_len );
    $cipher = openssl_encrypt( $data, $method, substr( hash( 'sha256', $key ), 0, 32 ), 0, $iv );
    if ( false === $cipher ) {
        return '';
    }
    return base64_encode( $iv . $cipher );
}

/**
 * Decrypt a string that was encrypted with aca_encrypt().
 *
 * @param string $data Encrypted string.
 * @return string Decrypted plain text.
 */
function aca_decrypt( $data ) {
    if ( empty( $data ) ) {
        return '';
    }
    $key    = defined( 'AUTH_KEY' ) ? AUTH_KEY : 'aca_default_key';
    $method = 'AES-256-CBC';
    $raw    = base64_decode( $data );
    $iv_len = openssl_cipher_iv_length( $method );
    $iv     = substr( $raw, 0, $iv_len );
    $cipher = substr( $raw, $iv_len );
    $plain  = openssl_decrypt( $cipher, $method, substr( hash( 'sha256', $key ), 0, 32 ), 0, $iv );
    return $plain ?: '';
}

/**
 * Central function to communicate with the Google Gemini API.
 *
 * This function handles all API requests, including error handling,
 * secure key management, and response validation.
 *
 * @param string $prompt The main prompt or question for the API.
 * @param string $system_instruction Optional. A system-level instruction for the API (e.g., a style guide).
 * @param array $api_args Optional. Arguments to override default API parameters (e.g., temperature, max_tokens).
 * @return string|WP_Error The content generated by the API on success, or a WP_Error object on failure.
 */
function aca_call_gemini_api( $prompt, $system_instruction = '', $api_args = [] ) {
	$options = get_option('aca_options');
    $monthly_limit = $options['api_monthly_limit'] ?? 0;
    $current_usage = get_option('aca_api_usage_current_month', 0);

    if ($monthly_limit > 0 && $current_usage >= $monthly_limit) {
        return new WP_Error('limit_exceeded', __('The monthly API call limit has been reached.', 'aca'));
    }

    $api_key_encrypted = get_option( 'aca_gemini_api_key' );
    $api_key = ! empty( $api_key_encrypted ) ? aca_decrypt( $api_key_encrypted ) : '';

	if ( empty( $api_key ) ) {
		return new WP_Error( 'api_key_missing', __( 'Google Gemini API key is not set.', 'aca' ) );
	}

        $api_url = 'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key=' . $api_key;

    $contents = [
        [
            'role' => 'user',
            'parts' => [
                ['text' => $prompt]
            ]
        ]
    ];

	// Default payload structure for Gemini API
	$default_payload = [
		'contents' => $contents,
		'generationConfig' => [
			'temperature'     => 0.7,
			'topK'            => 1,
			'topP'            => 1,
			'maxOutputTokens' => 2048,
			'stopSequences'   => [],
		],
		'safetySettings' => [
			[
				'category' => 'HARM_CATEGORY_HARASSMENT',
				'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
			],
			[
				'category' => 'HARM_CATEGORY_HATE_SPEECH',
				'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
			],
			[
				'category' => 'HARM_CATEGORY_SEXUALLY_EXPLICIT',
				'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
			],
			[
				'category' => 'HARM_CATEGORY_DANGEROUS_CONTENT',
				'threshold' => 'BLOCK_MEDIUM_AND_ABOVE',
			],
		],
	];

    if (!empty($system_instruction)) {
        $default_payload['systemInstruction'] = [
            'parts' => [
                ['text' => $system_instruction]
            ]
        ];
    }
    
    // In the future, we can merge $api_args with $default_payload for more granular control.

	$request_args = [
		'method'  => 'POST',
		'headers' => [
			'Content-Type' => 'application/json',
		],
		'body'    => wp_json_encode( $default_payload ),
		'timeout' => 120, // Increased timeout for potentially long content generation.
	];

	$response = wp_remote_post( $api_url, $request_args );

	if ( is_wp_error( $response ) ) {
		// Returns the WP_Error from the HTTP request itself.
		return $response;
	}

	$response_code = wp_remote_retrieve_response_code( $response );
	$response_body = wp_remote_retrieve_body( $response );
    $data = json_decode( $response_body, true );

	if ( $response_code !== 200 ) {
        $error_message = isset($data['error']['message']) ? $data['error']['message'] : __( 'An unknown API error occurred.', 'aca' );
		return new WP_Error( 'api_error', sprintf( __( 'API request failed with status code %d: %s', 'aca' ), $response_code, $error_message ), [ 'status' => $response_code ] );
	}

	if ( ! isset( $data['candidates'][0]['content']['parts'][0]['text'] ) ) {
        // Check for blocked content due to safety settings
        if (isset($data['candidates'][0]['finishReason']) && $data['candidates'][0]['finishReason'] === 'SAFETY') {
            return new WP_Error('safety_block', __('The content could not be generated because it was blocked by the API\'s safety settings.', 'aca'));
        }
		return new WP_Error( 'invalid_response', __( 'The API response did not contain the expected content format.', 'aca' ) );
	}

    // Increment usage counter on successful call
    $current_usage++;
    update_option('aca_api_usage_current_month', $current_usage);

	return $data['candidates'][0]['content']['parts'][0]['text'];
}